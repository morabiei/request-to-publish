name: Autofill Project Fields from Issue

on:
  issues:
    types: [opened]

permissions:
  issues: read
  contents: read
  

jobs:
  autofill-fields:
    runs-on: ubuntu-latest

    steps:
      - name: Parse issue form values
        id: issue-parser
        uses: zentered/issue-forms-body-parser@v2
        with:
          issue_id: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug parsed outputs
        run: |
          echo "Parsed issue form values:"
          echo "${{ toJSON(steps.issue-parser.outputs) }}"

      - name: Autofill GitHub Project fields
        uses: actions/github-script@v7
        env:
          MY_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NAME: ${{ steps.issue-parser.outputs.issueparser_project_name }}
          INTERNAL_REPO: ${{ steps.issue-parser.outputs.issueparser_internal_repository_for_development_and_quality_checks_eg_github_enterprise }}
          PROJECT_URL: ${{ steps.issue-parser.outputs.issueparser_project_url }}
          GITHUB_ORG: ${{ steps.issue-parser.outputs.issueparser_github_organisation }}
          USER_ID: ${{ steps.issue-parser.outputs.issueparser_user_id }}
          LICENSE_ID: ${{ steps.issue-parser.outputs.issueparser_license_id }}
        with:
          script: |
            const token = process.env.MY_GITHUB_TOKEN;
            const projectId = "PVT_kwHOCMwB1M4A2ttm"; // <-- Dein Project Board ID
            const issue = context.payload.issue;

            const outputs = {
              "Project Name": process.env.PROJECT_NAME,
              "Internal repository": process.env.INTERNAL_REPO,
              "Project URL": process.env.PROJECT_URL,
              "GitHub Organisation": process.env.GITHUB_ORG,
              "User ID": process.env.USER_ID,
              "License ID": process.env.LICENSE_ID
            };

            // GraphQL-Anfragefunktion
            async function graphql(query, variables = {}) {
              return await github.graphql(query, variables);
            }

            // Felder des Project Boards abfragen
            const fieldQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;

            const fieldData = await graphql(fieldQuery, { projectId });

            if (!fieldData?.node) throw new Error("❌ Projekt-ID ungültig oder kein Zugriff");

            console.log("ℹ️ Alle verfügbaren Felder im Projekt:");
            for (const f of fieldData.node.fields.nodes) {
              console.log(`➡️ ${f.name}`);
            }

            const fieldMap = {};
            for (const f of fieldData.node.fields.nodes) {
              fieldMap[f.name] = f.id;
            }

            // Issue zum Projekt hinzufügen
            const addItemMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `;

            const addItemResult = await graphql(addItemMutation, {
              projectId,
              contentId: issue.node_id
            });

            const itemId = addItemResult.addProjectV2ItemById.item.id;

            // Felder setzen
            for (const [label, value] of Object.entries(outputs)) {
              const fieldId = fieldMap[label];
              if (!fieldId || !value) {
                console.log(`⚠️ Überspringe Feld '${label}' (fehlender Wert oder ID)`);
                continue;
              }

              const updateMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { text: $value }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;

              await graphql(updateMutation, {
                projectId,
                itemId,
                fieldId,
                value
              });

              console.log(`✅ Feld '${label}' aktualisiert mit Wert '${value}'`);
            }
