name: Autofill Project Fields from Issue

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: read
  id-token: write
  pull-requests: read

jobs:
  autofill-project:
    runs-on: ubuntu-latest
    steps:
      - name: Parse issue form values
        id: issue-parser
        uses: zentered/issue-forms-body-parser@v2.1.0
        with:
          issue_id: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug parsed outputs
        run: |
          echo "Parsed issue form values:"
          echo "${{ toJSON(steps.issue-parser.outputs) }}"

      - name: Autofill GitHub Project fields
        uses: actions/github-script@v7
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          PROJECT_NAME: ${{ steps.issue-parser.outputs.project_name }}
          INTERNAL_REPO: ${{ steps.issue-parser.outputs.internal_repository_for_development_and_quality_checks_eg_github_enterprise }}
          PROJECT_URL: ${{ steps.issue-parser.outputs.project_url }}
          GITHUB_ORG: ${{ steps.issue-parser.outputs.github_organisation }}
          USER_ID: ${{ steps.issue-parser.outputs.user_id }}
          LICENSE_ID: ${{ steps.issue-parser.outputs.license_id }}
        with:
          script: |
            const token = process.env.MY_GITHUB_TOKEN;
            const projectId = "PVT_kwHOCMwB1M4A2ttm"; // 
            const issue = context.payload.issue;

            const outputs = {
              "Project Name": process.env.PROJECT_NAME,
              "Internal repository": process.env.INTERNAL_REPO,
              "Project URL": process.env.PROJECT_URL,
              "GitHub Organisation": process.env.GITHUB_ORG,
              "User ID": process.env.USER_ID,
              "License ID": process.env.LICENSE_ID
            };

            async function graphql(query, variables = {}) {
              const response = await fetch("https://api.github.com/graphql", {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${token}`,
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ query, variables }),
              });
              const result = await response.json();
              if (result.errors) {
                console.error("GraphQL Errors:", result.errors);
                throw new Error("GraphQL query failed");
              }
              return result.data;
            }

            // Felder auslesen
            const fieldQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;
            const fieldData = await graphql(fieldQuery);
            const fieldMap = {};
            for (const f of fieldData.node.fields.nodes) {
              console.log(`➡️ ${f.name}`);
              fieldMap[f.name] = f.id;
            }

            // Item ins Projekt einfügen
            const addItemMutation = `
              mutation {
                addProjectV2ItemById(input: { projectId: "${projectId}", contentId: "${issue.node_id}" }) {
                  item {
                    id
                  }
                }
              }
            `;
            const addItemResult = await graphql(addItemMutation);
            const itemId = addItemResult.addProjectV2ItemById.item.id;

            // Felder setzen
            for (const [label, value] of Object.entries(outputs)) {
              const fieldId = fieldMap[label];
              if (!fieldId || !value) {
                console.log(`⚠️ Skip field '${label}' (no fieldId or value)`);
                continue;
              }

              const updateMutation = `
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${fieldId}",
                    value: { text: "${value}" }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              await graphql(updateMutation);
              console.log(`✅ Updated field '${label}' with value '${value}'`);
            }
