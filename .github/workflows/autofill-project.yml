name: Autofill Project Board

on:
  issues:
    types: [opened]

permissions:
  issues: read
  contents: read
  id-token: write
  pull-requests: read
  project: write

jobs:
  autofill:
    runs-on: ubuntu-latest
    steps:
      - name: Parse issue form
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/foss_contribution.yml # passe das ggf. an

      - name: Add issue to project and update fields
        uses: actions/github-script@v7
        env:
          PROJECT_ID: PVT_kwHOCMwB1M4A2ttm
        with:
          script: |
            const projectId = process.env.PROJECT_ID;
            const issue = context.payload.issue;
            const itemContentId = issue.node_id;

            const fields = {
              "Project Name": "${{ steps.issue-parser.outputs.issueparser_project_name }}",
              "Internal repository for development and quality checks": "${{ steps.issue-parser.outputs.issueparser_internal_repository_for_development_and_quality_checks }}",
              "Project URL": "${{ steps.issue-parser.outputs.issueparser_project_url }}",
              "GitHub Organization (Personal or Corporate)": "${{ steps.issue-parser.outputs.issueparser_github_organization_personal_or_corporate }}",
              "User ID": "${{ steps.issue-parser.outputs.issueparser_user_id }}",
              "License ID": "${{ steps.issue-parser.outputs.issueparser_license_id }}"
            };

            const graphql = async (query, variables = {}) => {
              const response = await fetch("https://api.github.com/graphql", {
                method: "POST",
                headers: {
                  "Authorization": `Bearer ${process.env.GITHUB_TOKEN}`,
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({ query, variables })
              });
              const result = await response.json();
              if (result.errors) {
                console.error("GraphQL Errors:", result.errors);
                throw new Error("GraphQL query failed");
              }
              return result.data;
            };

            const fieldQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;
            const fieldData = await graphql(fieldQuery);
            const fieldMap = {};
            for (const f of fieldData.node.fields.nodes) {
              fieldMap[f.name] = f.id;
            }

            const addItemMutation = `
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${projectId}",
                  contentId: "${itemContentId}"
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            const addItemResult = await graphql(addItemMutation);
            const itemId = addItemResult.addProjectV2ItemById.item.id;

            for (const [name, value] of Object.entries(fields)) {
              const fieldId = fieldMap[name];
              if (!fieldId || !value) continue;
              const updateMutation = `
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${fieldId}",
                    value: {
                      text: "${value.replace(/"/g, '\\"')}"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              await graphql(updateMutation);
            }
