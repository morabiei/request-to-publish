name: Autofill Project Board
on:
  issues:
    types: [opened, edited]

permissions:
  contents: read
  issues: read
  repository-projects: write  # oder repository-projects, falls dein Projekt ein Repo-Board ist

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Fields
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;
            function extractValue(label) {
              const regex = new RegExp(`${label}:\\s*(.*)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : null;
            }

            const fields = {
              projectName: extractValue("Project Name"),
              internalRepo: extractValue("Internal repository"),
              projectURL: extractValue("Project URL"),
              org: extractValue("GitHub Organization"),
              userID: extractValue("User ID"),
              status: "New Requests"
            };

            core.setOutput("fields", JSON.stringify(fields));

      - name: Add Issue to Project Board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fields = JSON.parse(core.getInput("fields"));
            const projectId = "PVT_kwHOCMwB1M4A2ttm"; // Dein Project ID

            const issueId = context.payload.issue.node_id;

            await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId: projectId,
              contentId: issueId
            });
        with:
          fields: ${{ steps.extract.outputs.fields }}
