name: Validate GitHub Organization

on:
  issues:
    types: [opened]

jobs:
  validate-org:
    runs-on: ubuntu-latest

    steps:
      - name: Extract 'target-org' from issue body
        id: extract-org
        run: |
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Parse target-org using regex
        id: parse
        run: |
          ORG=$(echo "$ISSUE_BODY" | grep -Po '(?<=### GitHub Organization \(Personal or Corporate\)\n)[^\n]+')
          echo "org=$ORG" >> $GITHUB_OUTPUT

      - name: Check if organization exists on GitHub
        id: check-org
        run: |
          ORG="${{ steps.parse.outputs.org }}"
          echo "Checking organization: $ORG"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/orgs/$ORG)
          echo "status_code=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Comment on the issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const org = '${{ steps.parse.outputs.org }}';
            const status = '${{ steps.check-org.outputs.status_code }}';
            if (status === '200') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `✅ The organization **${org}** exists on GitHub.`
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ The organization **${org}** does NOT exist on GitHub. Please check the spelling or provide a valid organization.`
              });
            }
