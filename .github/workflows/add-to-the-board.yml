name: Autofill Project Fields from Issue

on:
  issues:
    types: [opened]

jobs:
  autofill-project:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: read
      id-token: write
      # âœ… DAS FEHLTE
      project: write

    steps:
      - name: Parse and fill project fields
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body;
            const projectId = "PVT_kwHOCMwB1M4A2ttm";

            function extractField(label, body) {
              const regex = new RegExp(`${label}\\n\\n(.+?)\\n`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }

            const fields = {
              "Project Name": extractField("Project Name", issueBody),
              "Internal repository for development and quality checks": extractField("Internal repository for development and quality checks \\(e\\.g\\. GitHub Enterprise\\)", issueBody),
              "Project URL": extractField("Project URL", issueBody),
              "GitHub Organization \\(Personal or Corporate\\)": extractField("GitHub Organization \\(Personal or Corporate\\)", issueBody),
              "User ID": extractField("User ID", issueBody),
              "License ID": extractField("License ID", issueBody),
            };

            const headers = {
              "Authorization": `Bearer ${process.env.GITHUB_TOKEN}`,
              "Content-Type": "application/json"
            };

            async function graphql(query, variables = {}) {
              const response = await fetch("https://api.github.com/graphql", {
                method: "POST",
                headers,
                body: JSON.stringify({ query, variables }),
              });
              const result = await response.json();
              if (result.errors) {
                console.error("GraphQL Errors:", result.errors);
                throw new Error("GraphQL query failed");
              }
              return result.data;
            }

            // Step 1: get field IDs
            const fieldQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            `;
            const fieldData = await graphql(fieldQuery);
            const fieldMap = {};
            for (const f of fieldData.node.fields.nodes) {
              fieldMap[f.name] = f.id;
            }

            // Step 2: add issue to project
            const addItemMutation = `
              mutation {
                addProjectV2ItemById(input: { projectId: "${projectId}", contentId: "${issue.node_id}" }) {
                  item {
                    id
                  }
                }
              }
            `;
            const addItemResult = await graphql(addItemMutation);
            const itemId = addItemResult.addProjectV2ItemById.item.id;

            // Step 3: set field values
            for (const [name, value] of Object.entries(fields)) {
              const fieldId = fieldMap[name];
              if (!fieldId || !value) continue;
              const updateMutation = `
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${fieldId}",
                    value: { text: "${value}" }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              await graphql(updateMutation);
            }
