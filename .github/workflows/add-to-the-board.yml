name: Autofill Project Fields from Issue

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: read
  id-token: write
  pull-requests: read

jobs:
  autofill-project:
    runs-on: ubuntu-latest
    steps:
      - name: Parse Issue Form
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/foss-contribution-request.yml

      - name: Autofill GitHub Project fields
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = "PVT_kwHOCMwB1M4A2ttm"; // Ersetze durch deine echte ProjectV2 ID
            const issue = context.payload.issue;
            const outputs = {
              "Project Name": "${{ steps.issue-parser.outputs.issueparser_project_name }}",
              "Internal repository": "${{ steps.issue-parser.outputs.issueparser_internal_repository }}",
              "Project URL": "${{ steps.issue-parser.outputs.issueparser_project_url }}",
              "GitHub Organization": "${{ steps.issue-parser.outputs.issueparser_target_org }}",
              "User ID": "${{ steps.issue-parser.outputs.issueparser_target_repo }}",
              "License ID": "${{ steps.issue-parser.outputs.issueparser_license }}"
            };

            async function graphql(query, variables = {}) {
              const response = await fetch("https://api.github.com/graphql", {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ query, variables }),
              });
              const result = await response.json();
              if (result.errors) {
                console.error("GraphQL Errors:", result.errors);
                throw new Error("GraphQL query failed");
              }
              return result.data;
            }

            const fieldQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;
            const fieldData = await graphql(fieldQuery);
            if (!fieldData?.node) throw new Error("❌ Project ID ungültig oder kein Zugriff");

            const fieldMap = {};
            for (const f of fieldData.node.fields.nodes) {
              fieldMap[f.name] = f.id;
            }

            const addItemMutation = `
              mutation {
                addProjectV2ItemById(input: { projectId: "${projectId}", contentId: "${issue.node_id}" }) {
                  item {
                    id
                  }
                }
              }
            `;
            const addItemResult = await graphql(addItemMutation);
            const itemId = addItemResult.addProjectV2ItemById.item.id;

            for (const [label, value] of Object.entries(outputs)) {
              const fieldId = fieldMap[label];
              if (!fieldId || !value) continue;

              const updateMutation = `
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${fieldId}",
                    value: { text: "${value}" }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              await graphql(updateMutation);
            }
