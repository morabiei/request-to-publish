name: Autofill Project Fields from Issue

on:
  issues:
    types: [opened]

permissions:
  issues: read
  contents: read
  repository-projects: write

jobs:
  autofill-project:
    runs-on: ubuntu-latest

    steps:
      - name: Autofill project fields from issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body;
            const projectId = "PVT_kwHOCMwB1M4A2ttm"; // dein Project ID

            // üß† Helper-Funktion zum Extrahieren von Feldern
            function extractField(label, body) {
              const regex = new RegExp(`${label}\\n+(.+?)(\\n|$)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }

            // üßæ Alle Felder aus dem Template extrahieren
            const fields = {
              "Project Name": extractField("Project Name", issueBody),
              "Internal repository for development and quality checks": extractField("Internal repository for development and quality checks \\(e\\.g\\. GitHub Enterprise\\)", issueBody),
              "Project URL": extractField("Project URL", issueBody),
              "GitHub Organization (Personal or Corporate)": extractField("GitHub Organization \\(Personal or Corporate\\)", issueBody),
              "User ID": extractField("User ID", issueBody),
              "License ID": extractField("License ID", issueBody),
            };

            // üí° Zugriff auf GraphQL via Octokit
            const fieldQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            `;

            const fieldData = await github.graphql(fieldQuery);
            const fieldMap = {};
            for (const f of fieldData.node.fields.nodes) {
              fieldMap[f.name] = f.id;
            }

            const addItemMutation = `
              mutation AddItem($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item {
                    id
                  }
                }
              }
            `;

            const addItemResult = await github.graphql(addItemMutation, {
              projectId,
              contentId: issue.node_id,
            });

            const itemId = addItemResult.addProjectV2ItemById.item.id;

            // ‚úçÔ∏è Felder ausf√ºllen
            for (const [name, value] of Object.entries(fields)) {
              const fieldId = fieldMap[name];
              if (!fieldId || !value) continue;

              const updateMutation = `
                mutation UpdateField($projectId:ID!, $itemId:ID!, $fieldId:ID!, $value:String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { text: $value }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;

              await github.graphql(updateMutation, {
                projectId,
                itemId,
                fieldId,
                value,
              });
            }

            console.log("‚úÖ Issue wurde erfolgreich dem Project hinzugef√ºgt & bef√ºllt.");
